 @GetMapping (path = "/list/filter-model/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Object>  ListId (@PathVariable long id, Pageable pageable) {
        logger.info("----- Listado de archivos por id  {} -----", id);
        List<UpdateDownloadResponse> list = UpdateDownloadService.ListId(pageable,id);
        logger.info(FIN_HTTP);
        
        return ResponseEntity.status(list != null ? HttpStatus.OK : HttpStatus.NOT_FOUND).body(list != null ? list : Util.jsonMessage(MessagesDTO.SIN_INFORMACION));
    }




 public List<UpdateDownloadResponse> ListId(Pageable pageable, long id) {
        List<UpdateDownload> list = repositoryDownload.findById(pageable,id);
        return (!list.isEmpty()) ? mapperListToResponse(list) : null;
    }

 @Query("SELECT u FROM UpdateDownload u WHERE u.elemento.id = :id")
    List<UpdateDownload> findByElementoId(long id, Pageable pageable);



getFilesModel(model: string) {
    console.log(model);
    this.changeService.requestGetFilesByModel(0, model).subscribe(
      response => {
        this.dataSource.data = response as FilesAndVersionsDTO[];
      }, error => {
        console.log('Sin archivos por la version seleccionada');
      })
  }
